#:schema https://gist.githubusercontent.com/sripwoud/144f811fbaafe2765f894d81cb1d986c/raw/7bb569892c31e9aa692c0fb3808af9134cfe9764/mise-task.json

[env]
PRISMA_GEN_RS_CLIENT_PATH = "{{config_root}}/db/prisma/src/generated.rs"
PRISMA_GEN_TS_BINDINGS_PATH = "{{config_root}}/apps/client/src/lib/bindings.ts"
VITE_SERVER_URL = "http://localhost:3000"
SUPABASE_WORKDIR = "db"
DATABASE_URL = "postgresql://postgres:postgres@127.0.0.1:54322/postgres"

[tools]
bun = "latest"
"cargo:cargo-nextest" = "latest"
lefthook = "latest"
rust = "latest"

[tasks]
add-shadcn-component = { alias = "ac", dir = "apps/client", run = 'bunx --bun shadcn@latest add {{arg(name="component")}}' }
build-client = { alias = "bc", dir = "apps/client", run = "bun vite build", sources = [
    "apps/client/**/*",
    "!apps/client/dist/**",
    "!apps/client/node_modules/**",
], outputs.auto = true, depends = [
    "gen-ts",
] }
build-server = { alias = "bs", dir = "apps/server", run = "cargo build -r", sources = [
    "apps/server/**/*.rs",
], outputs.auto = true }
db-start = { alias = "dbs", description = "Run local postgres instance (with supabase docker container)", run = "bun supabase start" }
dev = { alias = "d", depends = ["db-start", "dev-client", "dev-server"] }
dev-client = { alias = "dc", dir = "apps/client", run = "bun vite dev", depends = [
    "install-node-modules",
    "gen-ts",
] }
dev-server = { alias = "ds", run = "cargo run --bin api", depends = ["gen-rs"] }
freedit = { dir = "apps/freedit", run = "cargo run -r --bin freedit" }
gen-rs = { description = "Generate Prisma Rust Client", run = "cargo run --bin prisma -- generate", depends_post = [
    "maybe-post-gen-rs",
], sources = [
    "db/prisma/schema.prisma",
], outputs = "db/prisma/src/generated.rs" }
install-node-modules = { hide = true, run = "bun i", sources = [
    "package.json",
    "apps/client/package.json",
], outputs = [
    "bun.lockb",
] }
gen-ts = { run = "cargo run --bin bindings", hide = true }
prisma = { alias = "p", dir = "db/prisma", description = "Run prisma CLI by connecting to the DB with pgbouncer", run = "cargo run -F bin --", depends_post = [
    "maybe-post-gen-rs",
] }
start = { alias = "s", depends = ["db-start", "start-server", "start-client"] }
start-client = { alias = "sc", depends = [
    "install-node-modules",
    "build-client",
], dir = "apps/client", run = "bun vite preview", sources = [
    "apps/client/**/*",
    "!apps/client/dist/**",
    "!apps/client/node_modules/**",
], outputs.auto = true }
start-server = { alias = "ss", dir = "apps/server", run = "cargo run -r --bin api", sources = [
    "apps/server/**/*.rs",
], outputs.auto = true, depends = [
    "gen-rs",
] }
test = { alias = "t", run = "cargo nextest run" }

[tasks.clean]
alias = "c"
quiet = true
run = """
#!/usr/bin/env bash

BASE_DIRS=(
  "node_modules"
  "bun.lockb"
  "apps/client/node_modules"
  "apps/client/dist"
  "target"
  "apps/freedit/config.toml"
  "apps/freedit/freedit.db"
  "apps/freedit/snapshots"
  "apps/freedit/static/imgs"
  "apps/freedit/tantivy"
  "apps/freedit/target"
)

for dir in "${BASE_DIRS[@]}"; do
  find "$dir" -type f -exec rm -f {} +  2>/dev/null || true
  find "$dir" -type d -exec rm -rf {} + 2>/dev/null || true
done
"""

[tasks.maybe-post-gen-rs]
hide = true
quiet = true
run = """
#!/usr/bin/env bash

ALLOW_CLIPPY_ALL='#![allow(clippy::all)]'
ALLOW_UNUSED_IMPORTS='#![allow(unused_imports)]'
EXPECTED=$(printf '%s\n%s' "$ALLOW_CLIPPY_ALL" "$ALLOW_UNUSED_IMPORTS")
ACTUAL="$(head -n2 "$PRISMA_GEN_RS_CLIENT_PATH")"

if [[ "$ACTUAL" != "$EXPECTED" ]]; then
    TMP_FILE=$(mktemp)
    printf "%s\\n%s\\n" "#![allow(clippy::all)]" "#![allow(unused_imports)]" > "$TMP_FILE"
    cat "$PRISMA_GEN_RS_CLIENT_PATH" >> "$TMP_FILE"
    mv "$TMP_FILE" "$PRISMA_GEN_RS_CLIENT_PATH"
fi
"""
