/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router"

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as InnIidImport } from "./routes/inn/$iid"

// Create Virtual Routes

const IndexLazyImport = createFileRoute("/")()
const InnIndexLazyImport = createFileRoute("/inn/")()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route))

const InnIndexLazyRoute = InnIndexLazyImport.update({
  id: "/inn/",
  path: "/inn/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/inn/index.lazy").then((d) => d.Route))

const InnIidRoute = InnIidImport.update({
  id: "/inn/$iid",
  path: "/inn/$iid",
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    "/inn/$iid": {
      id: "/inn/$iid"
      path: "/inn/$iid"
      fullPath: "/inn/$iid"
      preLoaderRoute: typeof InnIidImport
      parentRoute: typeof rootRoute
    }
    "/inn/": {
      id: "/inn/"
      path: "/inn"
      fullPath: "/inn"
      preLoaderRoute: typeof InnIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexLazyRoute
  "/inn/$iid": typeof InnIidRoute
  "/inn": typeof InnIndexLazyRoute
}

export interface FileRoutesByTo {
  "/": typeof IndexLazyRoute
  "/inn/$iid": typeof InnIidRoute
  "/inn": typeof InnIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/": typeof IndexLazyRoute
  "/inn/$iid": typeof InnIidRoute
  "/inn/": typeof InnIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/" | "/inn/$iid" | "/inn"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "/inn/$iid" | "/inn"
  id: "__root__" | "/" | "/inn/$iid" | "/inn/"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  InnIidRoute: typeof InnIidRoute
  InnIndexLazyRoute: typeof InnIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  InnIidRoute: InnIidRoute,
  InnIndexLazyRoute: InnIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/inn/$iid",
        "/inn/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/inn/$iid": {
      "filePath": "inn/$iid.tsx"
    },
    "/inn/": {
      "filePath": "inn/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
