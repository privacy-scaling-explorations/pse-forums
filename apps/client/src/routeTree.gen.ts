/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router"

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as LayoutImport } from "./routes/_layout"
import { Route as InnIidImport } from "./routes/inn/$iid"

// Create Virtual Routes

const InnIndexLazyImport = createFileRoute("/inn/")()
const LayoutIndexLazyImport = createFileRoute("/_layout/")()
const LayoutSoloLazyImport = createFileRoute("/_layout/solo")()
const LayoutRssLazyImport = createFileRoute("/_layout/rss")()
const LayoutNotificationsLazyImport = createFileRoute(
  "/_layout/notifications",
)()

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: "/_layout",
  getParentRoute: () => rootRoute,
} as any)

const InnIndexLazyRoute = InnIndexLazyImport.update({
  id: "/inn/",
  path: "/inn/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/inn/index.lazy").then((d) => d.Route))

const LayoutIndexLazyRoute = LayoutIndexLazyImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => LayoutRoute,
} as any).lazy(() => import("./routes/_layout.index.lazy").then((d) => d.Route))

const LayoutSoloLazyRoute = LayoutSoloLazyImport.update({
  id: "/solo",
  path: "/solo",
  getParentRoute: () => LayoutRoute,
} as any).lazy(() => import("./routes/_layout.solo.lazy").then((d) => d.Route))

const LayoutRssLazyRoute = LayoutRssLazyImport.update({
  id: "/rss",
  path: "/rss",
  getParentRoute: () => LayoutRoute,
} as any).lazy(() => import("./routes/_layout.rss.lazy").then((d) => d.Route))

const LayoutNotificationsLazyRoute = LayoutNotificationsLazyImport.update({
  id: "/notifications",
  path: "/notifications",
  getParentRoute: () => LayoutRoute,
} as any).lazy(() => import("./routes/_layout.notifications.lazy").then((d) => d.Route))

const InnIidRoute = InnIidImport.update({
  id: "/inn/$iid",
  path: "/inn/$iid",
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_layout": {
      id: "/_layout"
      path: ""
      fullPath: ""
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    "/inn/$iid": {
      id: "/inn/$iid"
      path: "/inn/$iid"
      fullPath: "/inn/$iid"
      preLoaderRoute: typeof InnIidImport
      parentRoute: typeof rootRoute
    }
    "/_layout/notifications": {
      id: "/_layout/notifications"
      path: "/notifications"
      fullPath: "/notifications"
      preLoaderRoute: typeof LayoutNotificationsLazyImport
      parentRoute: typeof LayoutImport
    }
    "/_layout/rss": {
      id: "/_layout/rss"
      path: "/rss"
      fullPath: "/rss"
      preLoaderRoute: typeof LayoutRssLazyImport
      parentRoute: typeof LayoutImport
    }
    "/_layout/solo": {
      id: "/_layout/solo"
      path: "/solo"
      fullPath: "/solo"
      preLoaderRoute: typeof LayoutSoloLazyImport
      parentRoute: typeof LayoutImport
    }
    "/_layout/": {
      id: "/_layout/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof LayoutIndexLazyImport
      parentRoute: typeof LayoutImport
    }
    "/inn/": {
      id: "/inn/"
      path: "/inn"
      fullPath: "/inn"
      preLoaderRoute: typeof InnIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutNotificationsLazyRoute: typeof LayoutNotificationsLazyRoute
  LayoutRssLazyRoute: typeof LayoutRssLazyRoute
  LayoutSoloLazyRoute: typeof LayoutSoloLazyRoute
  LayoutIndexLazyRoute: typeof LayoutIndexLazyRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutNotificationsLazyRoute: LayoutNotificationsLazyRoute,
  LayoutRssLazyRoute: LayoutRssLazyRoute,
  LayoutSoloLazyRoute: LayoutSoloLazyRoute,
  LayoutIndexLazyRoute: LayoutIndexLazyRoute,
}

const LayoutRouteWithChildren = LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  "": typeof LayoutRouteWithChildren
  "/inn/$iid": typeof InnIidRoute
  "/notifications": typeof LayoutNotificationsLazyRoute
  "/rss": typeof LayoutRssLazyRoute
  "/solo": typeof LayoutSoloLazyRoute
  "/": typeof LayoutIndexLazyRoute
  "/inn": typeof InnIndexLazyRoute
}

export interface FileRoutesByTo {
  "/inn/$iid": typeof InnIidRoute
  "/notifications": typeof LayoutNotificationsLazyRoute
  "/rss": typeof LayoutRssLazyRoute
  "/solo": typeof LayoutSoloLazyRoute
  "/": typeof LayoutIndexLazyRoute
  "/inn": typeof InnIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/_layout": typeof LayoutRouteWithChildren
  "/inn/$iid": typeof InnIidRoute
  "/_layout/notifications": typeof LayoutNotificationsLazyRoute
  "/_layout/rss": typeof LayoutRssLazyRoute
  "/_layout/solo": typeof LayoutSoloLazyRoute
  "/_layout/": typeof LayoutIndexLazyRoute
  "/inn/": typeof InnIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ""
    | "/inn/$iid"
    | "/notifications"
    | "/rss"
    | "/solo"
    | "/"
    | "/inn"
  fileRoutesByTo: FileRoutesByTo
  to: "/inn/$iid" | "/notifications" | "/rss" | "/solo" | "/" | "/inn"
  id:
    | "__root__"
    | "/_layout"
    | "/inn/$iid"
    | "/_layout/notifications"
    | "/_layout/rss"
    | "/_layout/solo"
    | "/_layout/"
    | "/inn/"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  InnIidRoute: typeof InnIidRoute
  InnIndexLazyRoute: typeof InnIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  InnIidRoute: InnIidRoute,
  InnIndexLazyRoute: InnIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/inn/$iid",
        "/inn/"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/notifications",
        "/_layout/rss",
        "/_layout/solo",
        "/_layout/"
      ]
    },
    "/inn/$iid": {
      "filePath": "inn/$iid.tsx"
    },
    "/_layout/notifications": {
      "filePath": "_layout.notifications.lazy.tsx",
      "parent": "/_layout"
    },
    "/_layout/rss": {
      "filePath": "_layout.rss.lazy.tsx",
      "parent": "/_layout"
    },
    "/_layout/solo": {
      "filePath": "_layout.solo.lazy.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout.index.lazy.tsx",
      "parent": "/_layout"
    },
    "/inn/": {
      "filePath": "inn/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
