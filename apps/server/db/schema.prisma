generator client {
  provider        = "cargo run -F bin --bin prisma --"
  output          = "./src/generated.rs"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["bandada", "public"]
}

model User {
  id                 Int                @id @default(autoincrement())
  created_at         DateTime           @default(now()) @db.Timestamptz(6)
  email              String             @unique
  email_confirmed    Boolean            @default(false)
  encrypted_password String             @map("encrypted_password")
  salt               String
  username           String             @unique
  comments           Comment[]
  email_confirmation EmailConfirmation?
  posts              Post[]
  profile            Profile?
  BandadaAdmin       BandadaAdmin?

  @@map("user")
  @@schema("public")
}

model Profile {
  id         Int      @id
  about      String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  username   String   @unique
  url        String?
  user       User     @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("profile")
  @@schema("public")
}

model Post {
  id         Int       @id @default(autoincrement())
  uid        Int?      @unique
  title      String
  tags       String[]  @default([])
  content    String
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  gid        Int?
  comments   Comment[]
  group      Group?    @relation("GroupPosts", fields: [gid], references: [id])
  user       User?     @relation(fields: [uid], references: [id])

  @@map("post")
  @@schema("public")
}

model Comment {
  id         Int       @id @default(autoincrement())
  rid        Int?
  pid        Int
  uid        Int?
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  content    String
  post       Post      @relation(fields: [pid], references: [id], onDelete: Cascade)
  parent     Comment?  @relation("CommentReplies", fields: [rid], references: [id])
  replies    Comment[] @relation("CommentReplies")
  user       User?     @relation(fields: [uid], references: [id])

  @@map("comment")
  @@schema("public")
}

model Group {
  id                  Int           @id @default(autoincrement())
  description         String
  name                String
  created_at          DateTime      @default(now()) @db.Timestamptz(6)
  bandada_admin_id    Int? // null if this group is not associated with an semaphore group managed by bandada, otherwise the id of the bandada group admin
  tags                String[]
  posts               Post[]        @relation("GroupPosts")
  bandada_group       BandadaGroup?
  bandada_group_admin BandadaAdmin? @relation(fields: [bandada_admin_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("group")
  @@schema("public")
}

model EmailConfirmation {
  id         Int      @id @default(autoincrement())
  uid        Int      @unique
  token      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expires_at DateTime @db.Timestamptz(6)
  user       User     @relation(fields: [uid], references: [id], onDelete: Cascade)

  @@map("email_confirmation")
  @@schema("public")
}

model BandadaAdmin {
  // this deviates from original schema, set automatically to User.id via psql trigger
  id          Int            @id
  // default setting deviates from original schema
  // we don't need the address field, setting to default and not unique instead of removing to avoid potential breaking side effects
  // address     String         @default("unused") @db.VarChar
  // set to User.username with psql trigger function
  username    String         @unique
  // THIS DEVIATES FROM ORIGINAL SCHEMA, WE WANT TO ALLOW API FOR ALL ADMINS WE CREATE
  api_key     String         @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // THIS DEVIATES FROM ORIGINAL SCHEMA, WE WANT TO ALLOW API FOR ALL ADMINS WE CREATE
  api_enabled Boolean        @default(true)
  created_at  DateTime       @default(now()) @db.Timestamp(6)
  updated_at  DateTime       @default(now()) @db.Timestamp(6)
  groups      BandadaGroup[]
  Group       Group[]

  user User @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("admins")
  @@schema("bandada")
}

model BandadaGroup {
  id                   String               @id @db.VarChar(32) // redundant with gid, but kept for compat with bandada api
  gid                  Int                  @unique // set via psql trigger on group insert
  name                 String
  description          String
  admin_id             Int                  @unique
  tree_depth           Int                  @default(16)
  fingerprint_duration Int                  @default(3600)
  credentials          String?
  created_at           DateTime             @default(now()) @db.Timestamp(6)
  updated_at           DateTime             @default(now()) @db.Timestamp(6)
  group                Group                @relation(fields: [gid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  admin                BandadaAdmin         @relation(fields: [admin_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invites              BandadaInvite[]
  memberships          BandadaMembership[]
  oauth_accounts       BandadaOuthAccount[]

  @@map("groups")
  @@schema("bandada")
}

model BandadaInvite {
  id          Int           @id @default(autoincrement())
  code        String        @db.VarChar
  is_redeemed Boolean       @default(false)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  group_id    String?       @db.VarChar(32)
  group       BandadaGroup? @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("invites")
  @@schema("bandada")
}

model BandadaMember {
  id          String              @id @db.VarChar
  created_at  DateTime            @default(now()) @db.Timestamp(6)
  memberships BandadaMembership[]

  @@map("members")
  @@schema("bandada")
}

model BandadaMembership {
  group          String        @db.VarChar(32)
  member         String        @db.VarChar
  bandada_group  BandadaGroup  @relation(fields: [group], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bandada_member BandadaMember @relation(fields: [member], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([group, member])
  @@index([member])
  @@index([group])
  @@map("memberships")
  @@schema("bandada")
}

model BandadaOuthAccount {
  accountHash String        @id @db.VarChar
  group_id    String?       @db.VarChar(32)
  group       BandadaGroup? @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([accountHash, group_id])
  @@map("oauth_accounts")
  @@schema("bandada")
}
