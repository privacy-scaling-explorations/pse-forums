generator client {
  provider        = "cargo run -F bin --bin prisma --"
  output          = "./src/generated.rs"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["bandada", "public"]
}

model User {
  id                Int                @id @default(autoincrement())
  created_at        DateTime           @default(now()) @db.Timestamptz(6)
  email             String             @unique
  email_confirmed   Boolean            @default(false)
  encryptedPassword String             @map("encrypted_password")
  salt              String
  username          String             @unique
  Comment           Comment[]
  EmailConfirmation EmailConfirmation?
  Post              Post?
  Profile           Profile?

  @@map("user")
  @@schema("public")
}

model Profile {
  id         Int      @id
  about      String?
  created_at DateTime @db.Timestamptz(6)
  username   String   @unique
  url        String?
  user       User     @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("profile")
  @@schema("public")
}

model Post {
  id         Int       @id @default(autoincrement())
  uid        Int?      @unique
  title      String
  tags       String[]  @default([])
  content    String
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  gid        Int?
  comments   Comment[]
  group      Group?    @relation("GroupPosts", fields: [gid], references: [id])
  user       User?     @relation(fields: [uid], references: [id])

  @@map("post")
  @@schema("public")
}

model Comment {
  id         Int       @id @default(autoincrement())
  rid        Int?
  pid        Int
  uid        Int?
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  content    String
  post       Post      @relation(fields: [pid], references: [id], onDelete: Cascade)
  parent     Comment?  @relation("CommentReplies", fields: [rid], references: [id])
  replies    Comment[] @relation("CommentReplies")
  user       User?     @relation(fields: [uid], references: [id])

  @@map("comment")
  @@schema("public")
}

model Group {
  id          Int      @id @default(autoincrement())
  description String
  name        String
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  tags        String[]
  posts       Post[]   @relation("GroupPosts")

  @@map("group")
  @@schema("public")
}

model EmailConfirmation {
  id         Int      @id @default(autoincrement())
  uid        Int      @unique
  token      String   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expires_at DateTime @db.Timestamptz(6)
  user       User     @relation(fields: [uid], references: [id], onDelete: Cascade)

  @@map("email_confirmation")
  @@schema("public")
}

model admins {
  id          String   @id @db.VarChar
  address     String   @unique @db.VarChar
  username    String   @unique @db.VarChar
  api_key     String?  @db.VarChar
  api_enabled Boolean  @default(false)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  groups      groups[]

  @@schema("bandada")
}

model groups {
  id                   String           @id @db.VarChar(32)
  name                 String           @db.VarChar
  description          String           @db.VarChar
  admin_id             String           @db.VarChar
  tree_depth           Int
  fingerprint_duration Int
  credentials          String?
  created_at           DateTime         @default(now()) @db.Timestamp(6)
  updated_at           DateTime         @default(now()) @db.Timestamp(6)
  admins               admins           @relation(fields: [admin_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invites              invites[]
  memberships          memberships[]
  oauth_accounts       oauth_accounts[]

  @@schema("bandada")
}

model invites {
  id          Int      @id @default(autoincrement())
  code        String   @db.VarChar
  is_redeemed Boolean  @default(false)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  group_id    String?  @db.VarChar(32)
  groups      groups?  @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("bandada")
}

model members {
  id          String        @id @db.VarChar
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  memberships memberships[]

  @@schema("bandada")
}

model memberships {
  group   String  @db.VarChar(32)
  member  String  @db.VarChar
  groups  groups  @relation(fields: [group], references: [id], onDelete: NoAction, onUpdate: NoAction)
  members members @relation(fields: [member], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([group, member])
  @@index([member])
  @@index([group])
  @@schema("bandada")
}

model oauth_accounts {
  accountHash String  @id @db.VarChar
  group_id    String? @db.VarChar(32)
  groups      groups? @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([accountHash, group_id])
  @@schema("bandada")
}
